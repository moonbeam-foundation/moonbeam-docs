# Moonbeam

> Moonbeam is a smart contract platform that makes it easy to build natively interoperable applications on Polkadot and Ethereum.

## Docs

- [AI-Compatible Docs] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/ai-resources/ai-resources.md): Download LLM-optimized files of the Moonbeam documentation, including full content and category-specific resources for AI agents.
- [Historical Updates] (Reference) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/build/historical-updates.md): An overview of the historical updates made on Moonbeam and Moonriver, such as migrations and bug fixes applied to the Moonbeam source code.
- [Runtime Upgrades] (Reference) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/build/runtime-upgrades.md): A historical record of each runtime upgrade and the block at which the runtime was executed for Moonbeam, Moonriver, and the Moonbase Alpha TestNet.
- [Canonical Contract Addresses on Moonbeam] (Reference, Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/canonical-contracts.md): Overview of the canonical contracts available on Moonbeam, Moonriver, & Moonbase Alpha, including common-good contracts and precompiles.
- [Deploy Contracts with Ape] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/ape.md): Use Ape, a Python framework, to compile, deploy, and debug smart contracts using Python on Moonbeam, thanks to its Ethereum compatibility.
- [Deploy Contracts with Foundry] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/foundry.md): Learn how to use Foundry, an Ethereum development environment, to compile, deploy, and debug Solidity smart contracts on Moonbeam.
- [Deploy Contracts with Hardhat] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/hardhat.md): Learn how to use Hardhat, an Ethereum development environment, to compile, deploy, and debug Solidity smart contracts on Moonbeam.
- [Ethereum Development Environments] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/index.md): Learn how to use Ethereum tools such as Remix, OpenZeppelin, Hardhat, Waffle & Mars, and more to develop Solidity smart contracts on Moonbeam.
- [Deploy OpenZeppelin Contracts] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/openzeppelin/contracts.md): Learn how to create common OpenZeppelin contracts such as ERC-20, ERC-721, & ERC-1155 tokens with the OpenZeppelin Contracts Wizard and deploy them on Moonbeam.
- [Interact with OpenZeppelin] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/openzeppelin/index.md): Use OpenZeppelin contracts and libraries or the Contract Wizard to create and manage your Solidity smart contracts on Moonbeam.
- [An Overview of OpenZeppelin on Moonbeam] (Basics, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/openzeppelin/overview.md): Learn how to use OpenZeppelin products for creating and managing Solidity smart contracts on Moonbeam, thanks to its Ethereum compatibility features.
- [Deploy Smart Contracts with Remix] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/remix.md): Discover how to deploy and interact with Solidity smart contracts on Moonbeam using the Remix IDE, one of the most widely used Ethereum development tools.
- [Create a DApp with Scaffold-ETH 2] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/scaffold-eth.md): You can deploy a Solidity DApp with a React UI and subgraph on Moonbeam in minutes by using Scaffold-ETH 2. Learn how in this tutorial.
- [Tenderly Development Platform] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/tenderly.md): Learn how to use Tenderly, an Ethereum development platform, to build, debug, and monitor Solidity smart contracts on Moonbeam.
- [How to use thirdweb] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/thirdweb.md): This guide will show you some of thirdweb's features, including building, testing, and deploying smart contract templates to launch dApps on Moonbeam.
- [Deploy Smart Contracts with Waffle & Mars] (Dev Environments, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/dev-env/waffle-mars.md): Learn how to use Waffle and Mars to write, compile, test, and deploy Ethereum smart contracts on Moonbeam.
- [Ethereum API] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/index.md): Learn how to use the Ethereum API when developing on Moonbeam. This section includes guides on Ethereum libraries, development environments, and more.
- [Debug & Trace Transactions] (JSON-RPC APIs, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/json-rpc/debug-trace.md): Check out the non-standard JSON-RPC methods included in Geth's Debug and Txpool APIs and OpenEthereum's Trace module, which are supported on Moonbeam.
- [Standard Ethereum JSON-RPC Methods] (JSON-RPC APIs, Reference, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/json-rpc/eth-rpc.md): Explore a comprehensive list of standard Ethereum JSON-RPC methods that can be used to interface with Moonbeam nodes programmatically.
- [JSON RPC API] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/json-rpc/index.md): The JSON-RPC API for Moonbeam provides a set of methods for interacting with a Moonbeam node programmatically over JSON-RPC (Remote Procedure Call).
- [Moonbeam-specific RPC Methods] (JSON-RPC APIs, Reference) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/json-rpc/moonbeam-custom-api.md): Discover Moonbeam's specialized API endpoints, featuring custom JSON-RPC methods designed exclusively for Moonbeam functionality.
- [Subscribe to Ethereum-style Events on Moonbeam] (JSON-RPC APIs, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/json-rpc/pubsub.md): Take a look at the non-standard Ethereum JSON-RPC methods supported on Moonbeam that offer publish-subscribe functionality for specific events.
- [How to use Ethers.js Ethereum Library] (Libraries and SDKs, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/libraries/ethersjs.md): Follow this tutorial to learn how to use the Ethereum Ethers.js Library to send transactions and deploy Solidity smart contracts to Moonbeam.
- [How to use Ethers.rs Ethereum Library] (Libraries and SDKs, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/libraries/ethersrs.md): Learn how to use the Ethereum Ethers.rs Library to send transactions and deploy Solidity smart contracts to Moonbeam via the Rust language.
- [Ethereum Libraries] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/libraries/index.md): Learn how to use JavaScript or Python Ethereum libraries such as Ethers.js, Web3.js, or Web3.py to send transactions or deploy contracts on Moonbeam.
- [How to use viem Ethereum Library] (Libraries and SDKs, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/libraries/viem.md): Check out this tutorial to learn how to use the viem TypeScript interface for Ethereum to send transactions and deploy Solidity smart contracts to Moonbeam.
- [How to use Web3.js Ethereum Library] (Libraries and SDKs, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/libraries/web3js.md): Follow this tutorial to learn how to use the Ethereum Web3 JavaScript Library to deploy Solidity smart contracts to Moonbeam.
- [How to use Web3.py Ethereum Library] (Libraries and SDKs, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/libraries/web3py.md): Follow this tutorial to learn how to use the Ethereum Web3 Python Library to to send transactions and deploy Solidity smart contracts to Moonbeam.
- [Identity Precompile] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/account/identity.md): Learn all you need to know about the Identity Precompile, such as its address, Solidity interface, and how to interact with it using popular Ethereum libraries.
- [Account-Related Precompiled Contracts] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/account/index.md): Efficiently manage accounts on Moonbeam with precompiled contracts designed for creating and managing proxy accounts and on-chain identities.
- [Interacting with the Proxy Precompile] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/account/proxy.md): How to use the Moonbeam proxy Solidity precompile interface to add and remove proxy accounts from Substrate's Proxy Pallet.
- [Collective Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/governance/collective.md): Learn how to use the Moonbeam Collective Precompile to perform democracy functions through any of the collectives on Moonbeam, such as the Treasury Council.
- [Conviction Voting Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/governance/conviction-voting.md): Learn how to vote on referenda, set up voting delegations, and more, directly through a Solidity interface with the Conviction Voting Precompile on Moonbeam.
- [Solidity Precompiles] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/governance/index.md): Facilitate decentralized decision-making with Moonbeam's governance precompiles for creating and submitting proposals and voting on referenda.
- [Preimage Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/governance/preimage.md): Learn how to take the first necessary step to submit a proposal on-chain by submitting a preimage that contains the action to be carried out in the proposal.
- [Referenda Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/governance/referenda.md): Learn how to view and submit proposals on-chain to be put forth for referenda, directly through a Solidity interface with the Referenda Precompile on Moonbeam.
- [Precompiles For Key Moonbeam Features] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/index.md): Access essential network features on Moonbeam through precompiled contracts for governance, staking, and secure randomness generation.
- [Randomness Precompile] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/randomness.md): Learn about the sources of VRF randomness on Moonbeam and how to use the randomness precompile and consumer interface to generate on-chain randomness.
- [Staking Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/features/staking.md): Unlock the potential of staking with a specialized precompiled contract designed to streamline and optimize participation in Moonbeam.
- [Solidity Precompiles] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/index.md): Discover the precompiled contracts on Moonbeam, your gateway to effortless interaction with Substrate modules and features using the Ethereum API.
- [GMP Precompile] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/interoperability/gmp.md): Learn about the GMP precompile on Moonbeam and how to use it with the Moonbeam Routed Liquidity program provided by bridges like Wormhole.
- [Interoperability Precompiles] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/interoperability/index.md): Unlock cross-chain capabilities with Moonbeam's precompiled contracts designed for interoperability, including GMP and XCM protocols.
- [Solidity Precompiles] (Reference, Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/overview.md): An overview of the available Solidity precompiles on Moonbeam. Precompiles enable you to interact with Substrate features using the Ethereum API.
- [Ethereum MainNet Precompiles] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/utility/eth-mainnet.md): Learn how to use the standard precompiled contracts available on Ethereum such as ECRECOVER, SHA256, and more on Moonbeam.
- [Utility Precompiles] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/utility/index.md): Utilize a range of utility functions with precompiles, including Ethereum MainNet hashing algorithms and additional Moonbeam-specific functions.
- [Non-Network Specific Precompiles] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/utility/non-specific.md): Learn how to use precompiled contracts, which are not specific to Ethereum or Moonbeam, yet are supported for use in your application.
- [Precompile Registry] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/utility/registry.md): Learn how to access and interact with the Precompile Registry on Moonbeam, which can be used to check if a given address is a precompile and if it is supported.
- [Relay Data Verifier Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/utility/relay-data-verifier.md): Learn how to verify data availability and authenticity on the relay chain via a Solidity interface with Moonbeam's Relay Data Verifier Precompile contract.
- [Batch Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/ux/batch.md): Learn how to transact multiple transfers and contract interactions at once via a Solidity interface with Moonbeam's Batch Precompile contract.
- [Call Permit Precompile Contract] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/ux/call-permit.md): Learn how to use the Call Permit Precompile contract on Moonbeam to sign a permit for any EVM call that can be dispatched by anyone or any smart contract.
- [Native Token ERC-20 Precompile] (Precompiles, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/ux/erc20.md): Learn how to access and interact with an ERC-20 representation of the native token on Moonbeam through the precompiled ERC-20 Interface.
- [Improve User Experience with Precompiles] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/precompiles/ux/index.md): Enhance the user experience on Moonbeam with precompiled contracts that allow seamless batch transactions and gasless operations for a smoother workflow.
- [Verify Smart Contracts through APIs] (Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/verify-contracts/api-verification.md): Learn how to verify smart contracts on Moonbeam-based networks using one of the available API-based verification methods.
- [Verify Smart Contracts on Block Explorers] (Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/verify-contracts/block-explorers.md): Learn how to verify smart contracts on Moonbeam-based networks using one of the available block explorers, such as Moonscan.
- [Verify Smart Contracts with Plugins] (Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/verify-contracts/etherscan-plugins.md): Learn how to verify smart contracts on Moonbeam networks using built-in tools from Hardhat and Foundry that support Moonscan’s API.
- [Verify Smart Contracts] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/ethereum/verify-contracts/index.md): Learn how to verify your Solidity smart contracts deployed to Moonbeam manually through block explorers and automatically through Etherscan plugins.
- [Create an Account] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/create-account.md): To begin developing on Moonbeam, you must create an account. This guide will provide you with the information needed to create one to use on Moonbeam.
- [Moonbeam API Providers and Endpoints] (JSON-RPC APIs, Reference) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/endpoints.md): Use one of the supported API providers to connect to a public endpoint or create custom JSON-RPC and WSS endpoints for Moonbeam-based networks.
- [Block Explorers] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/explorers.md): An overview of the currently available block explorers that may be used to navigate the Substrate and Ethereum layers of Moonbeam.
- [Get Started with Moonbeam] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/index.md): Everything you need to know to get started developing, deploying, and interacting with smart contracts on Moonbeam.
- [Get Started with Moonbeam-based Networks] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/networks/index.md): Learn how to get started developing on a Moonbeam development node, the Moonbase Alpha TestNet, Moonriver, or Moonbeam.
- [Moonbase Alpha Get Started Guide] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/networks/moonbase.md): The Moonbeam TestNet, named Moonbase Alpha, is the easiest way to get started with a Polkadot environment. Follow this tutorial to connect to the TestNet.
- [Run a Moonbeam Development Node] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/networks/moonbeam-dev.md): Follow this tutorial to learn how to spin up your first Moonbeam development node, how to configure it for development purposes, and connect to it.
- [Get Started with Moonbeam] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/networks/moonbeam.md): Learn how to connect to Moonbeam via RPC and WSS endpoints, how to connect MetaMask to Moonbeam, and about the available Moonbeam block explorers.
- [Moonriver Get Started Guide] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/networks/moonriver.md): Learn how to connect to Moonriver via RPC and WSS endpoints, how to connect MetaMask to Moonriver, and about the available Moonriver block explorers.
- [Quickly Get Started] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/quick-start.md): Everything you need to know to get started developing, deploying, and interacting with smart contracts on Moonbeam.
- [Add Token Information on Moonscan] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/get-started/token-profile.md): Add token information and create a token profile on Moonscan for ERC-20, ERC-721, and ERC-1155 tokens deployed to Moonbeam-based networks.
- [A Hub for Developers Building on Moonbeam] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/index.md): Guides for getting started and developing on Moonbeam. Learn how to use the Ethereum & Substrate APIs, XCM interoperability, and available integrations.
- [Dapplooker] (Integrations) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/analytics/dapplooker.md): Use Dapplooker to analyze and query on-chain data, and create dashboards to visualize analytics for Moonbeam and Moonriver.
- [Analyze On-Chain Data] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/analytics/index.md): Analyze on-chain smart contract data by building charts and dashboards to visualize data and track metrics for Moonbeam-based networks.
- [Portfolio Tracking on Moonbeam with Zapper] (Integrations) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/analytics/zapper.md): Learn how to track your holdings on Moonbeam using Zapper and explore different DeFi platforms in the Moonbeam ecosystem.
- [Integrations on Moonbeam] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/index.md): Learn about the available integrations on Moonbeam to ease your DApp development, including bridges, indexers, oracles, and wallets.
- [GoldRush API] (Indexers and Queries) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/indexers/covalent.md): Querying blockchain data such as balances, transactions, transfers, token holders, and event logs on Moonbeam with the GoldRush (formerly Covalent) API.
- [Indexers and APIs] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/indexers/index.md): Learn how to build your own API or consume API endpoints from any of the supported REST or GraphQL-based indexers on Moonbeam.
- [Interact with Moralis APIs] (Indexers and Queries) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/indexers/moralis.md): Learn how Moralis' API suite empowers developers to retrieve and leverage various data sets from Moonbeam, Moonriver, and Moonbase Alpha.
- [Index Data with SubQuery & GraphQL] (Indexers and Queries) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/indexers/subquery.md): Learn how to use SubQuery to index Substrate and EVM chain data for Moonbeam and Moonriver, and query the data using GraphQL.
- [Index Data with SQD (formerly Subsquid)] (Indexers and Queries) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/indexers/subsquid.md): Learn how to use SQD (Subsquid), a query node framework for Substrate-based chains, to index and process Substrate and EVM data for Moonbeam and Moonriver.
- [Build APIs with The Graph] (Indexers and Queries) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/indexers/thegraph.md): Learn how to build APIs, called subgraphs, to store and fetch on-chain data for a given smart contract using The Graph indexing protocol on Moonbeam.
- [Request Off-Chain Data with API3] (Oracle Nodes) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/oracles/api3.md): Learn how to use API3 to request and receive off-chain data from within your smart contracts using API3 Airnodes and dAPIs (data feeds) on Moonbeam networks.
- [Band Protocol Oracle] (Oracle Nodes) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/oracles/band-protocol.md): How to request data from a Band Protocol Oracle in your Moonbeam Ethereum DApp using smart contracts or JavaScript.
- [DIA Oracle] (Oracle Nodes) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/oracles/dia.md): Learn how to request a dedicated DIA oracle for your dApp, enabling access to price data for 2500+ tokens, randomness, and more.
- [Use an Oracle in your DApp] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/oracles/index.md): Check out some of the supported oracles and learn how to add an oracle to your DApp to request off-chain data for smart contracts on Moonbeam-based networks.
- [Razor Network Oracle] (Oracle Nodes) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/oracles/razor-network.md): How to request data from a Razor Network Oracle in your Moonbeam Ethereum DApp using smart contracts.
- [Supra Oracles] (Oracle Nodes) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/oracles/supra.md): Supra's Pull Oracle provides low-latency, on-demand price feed updates for a variety of use cases. Learn how to integrate Supra's oracle on Moonbeam.
- [Add Wallet Integrations to DApps] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/wallets/index.md): Learn how to add wallet integrations, such as MetaMask and WalletConnect, to your DApp on Moonbeam so users can automatically connect to their wallets.
- [Add MetaMask to a DApp] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/wallets/metamask.md): This tutorial shows you how to integrate MetaMask into a DApp and automatically connect users to Moonbeam with the click of a button.
- [Add Particle Network to a dApp] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/wallets/particle-network.md): Learn how to integrate Particle Network's Wallet-as-a-Service into a dApp built on Moonbeam to enable MPC-based onboarding and ERC-4337 AA interaction.
- [Add RainbowKit to a DApp] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/wallets/rainbowkit.md): Learn how to integrate RainbowKit into a dApp to allow users to connect their mobile wallets to Moonbeam, Moonriver, or Moonbase Alpha networks.
- [Add WalletConnect to a DApp] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/integrations/wallets/walletconnect.md): Learn how to integrate WalletConnect into a DApp built on any of the Moonbeam networks, specifically so users can connect with their mobile wallets.
- [Interoperability] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/index.md): Learn about interoperability on Moonbeam by diving into how cross-consensus messaging (XCM) works and exploring available cross-chain protocols.
- [Moonbeam Routed Liquidity] (XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/mrl.md): Learn how to receive Moonbeam Routed Liquidity after establishing a cross-chain integration with a Moonbeam-based network.
- [Cross-Chain Via Axelar] (GMP Providers) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/protocols/axelar.md): Learn about Axelar, a GMP protocol for cross-chain asset transfers, and how to get started building cross-chain applications with Axelar on Moonbeam.
- [Cross-Chain Via Hyperlane] (GMP Providers) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/protocols/hyperlane.md): Learn about Hyperlane, a GMP protocol for cross-chain asset transfers, and how to get started building cross-chain applications with Hyperlane on Moonbeam.
- [Cross-Chain Protocols] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/protocols/index.md): Learn about the cross-chain protocols you can use to transfer assets and remotely call contracts on any connected blockchain.
- [Cross-Chain Via LayerZero] (GMP Providers) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/protocols/layerzero.md): Learn about LayerZero, a GMP protocol for cross-chain asset transfers, and how to get started building cross-chain applications with LayerZero on Moonbeam.
- [Cross-Chain via Wormhole] (GMP Providers) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/protocols/wormhole.md): Learn how to bridge assets, set up a relayer, and other ways you can connect your Moonbeam DApp to assets and functions on multiple blockchains using Wormhole.
- [Core Concepts in XCM] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/core-concepts/index.md): Discover some of the fundamental components involved in constructing cross-chain messages, such as XCM instructions and multilocations.
- [XCM Instructions] (XCM, Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/core-concepts/instructions.md): When XCM instructions are combined, they form an XCM message that performs a cross-chain action. Take a look at some of the most common instructions.
- [XCM Multilocations] (XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/core-concepts/multilocations.md): Learn everything there is to know about multilocations, their role in XCM, and how to format a multilocation to target a specific point in the ecosystem.
- [Sovereign Accounts and Reserve-Backed Transfers] (XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/core-concepts/sovereign-accounts.md): Discover how sovereign accounts work on Moonbeam, how to calculate them, and their role in cross-chain asset transfers.
- [XCM Execution Fees] (XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/core-concepts/weights-fees.md): Learn about the XCM instructions involved in handling XCM execution fee payments and how to calculate fees on Polkadot, Kusama, and Moonbeam-based networks.
- [Cross-Chain Communication] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/index.md): An overview of how cross-consensus messaging (XCM) works and how you can leverage XCM to transfer assets to and from Moonbeam.
- [Cross-Consensus Messaging (XCM)] (Basics, XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/overview.md): An overview of how cross-consensus messaging (XCM) works and how developers can leverage Polkadot/Kusama XCM to gain access to new assets.
- [Computed Origin Accounts] (XCM Remote Execution) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/remote-execution/computed-origins.md): Learn about Computed Origin accounts, which can be used to execute remote cross-chain calls through a simple transaction, and how to calculate these accounts.
- [Cross-Chain Remote Execution] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/remote-execution/index.md): Learn about the basics of remote execution and how to perform remote cross-chain execution on other chains in the ecosystem and remote EVM calls on Moonbeam.
- [Remote Execution Overview] (XCM Remote Execution, Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/remote-execution/overview.md): Learn the basics of remote execution via XCM messages, which allow users to execute actions on other blockchains using accounts they control remotely via XCM.
- [Remote EVM Calls Through XCM] (XCM Remote Execution, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/remote-execution/remote-evm-calls.md): How to do remote calls to smart contracts on Moonbeam EVM through XCM from any Polkadot parachain that has an XCM channel established with Moonbeam.
- [Remote Substrate Calls] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/remote-execution/substrate-calls/index.md): Discover how to use the XCM Transactor Pallet and XCM Transactor Precompile to remotely call Substrate pallets on other chains in the ecosystem from Moonbeam.
- [The XCM Transactor Pallet] (XCM Remote Execution) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/remote-execution/substrate-calls/xcm-transactor-pallet.md): This guide provides an introduction to the XCM Transactor Pallet and explains how to send remote calls to another chain using some of the pallet's extrinsics.
- [The XCM Transactor Precompile] (XCM Remote Execution) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/remote-execution/substrate-calls/xcm-transactor-precompile.md): This guide describes the XCM Transactor Precompile and shows how to use some of its functions to send remote calls to other chains using Ethereum libraries.
- [Send, Execute and Test XCM Messages] (XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/send-execute-xcm.md): Build a custom XCM message, verify its construction and integrity using the XCM Dry Run API, and then execute it locally on Moonbeam to observe the results.
- [Register XC Assets] (XC-20) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc-registration/assets.md): This guide includes everything you need to know to register local and external XC-20s so you can begin transferring assets cross-chain via XCM.
- [Forum Templates for XCM Integrations] (XCM, Integrations) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc-registration/forum-templates.md): Learn about and how to craft the two posts you need to make on the Moonbeam Community Forum when creating a cross-chain integration with Moonbeam.
- [Register Cross-Chain Channels and Assets] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc-registration/index.md): Learn how to create a cross-chain integration with Moonbeam and how to register cross-chain assets that can be transferred between Moonbeam and another chain.
- [Self-Serve Asset Registration] (XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc-registration/self-serve-asset-registration.md): This guide shows sibling parachains how to register native tokens as foreign assets on Moonbeam via ForeignAssetOwnerOrigin to unlock ERC-20 UX on Moonbeam.
- [Open a Cross-Chain Channel] (XCM, Integrations) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc-registration/xc-integration.md): Learn how to establish a cross-chain integration with a Moonbeam-based network. Including opening and accepting an HRMP channel and registering assets.
- [Cross-Chain Assets & XC-20s] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/index.md): Learn about cross-chain assets, referred to as XC-20s, and how to interact with them through the Ethereum API on Moonbeam.
- [Interact with XC-20s] (XC-20) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/interact.md): Check out the XC-20 Solidity interfaces, including the ERC-20 and ERC-20 Permit interfaces, and how to interact with external XC-20s using these interfaces.
- [XC-20s and Cross-Chain Assets] (Basics, XC-20) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/overview.md): Learn about the types of cross-chain assets on Moonbeam, in particular, local and external XC-20s, and view a list of the external XC-20s on Moonbeam.
- [XCM Precompile] (XCM, Precompiles) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/send-xc20s/eth-api.md): Learn about the XCM Precompile and how to use it to transfer assets from Moonbeam networks to other parachains.
- [Send XC-20s via XCM] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/send-xc20s/index.md): This section shows you how to send XC-20s cross-chain from Moonbeam to other chains in the ecosystem using the X-Tokens Pallet and X-Tokens Precompile.
- [XC-20 Transfers Overview] (Basics, XC-20) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/send-xc20s/overview.md): Explore the types of asset transfers and some of the fundamentals of remote asset transfers via XCM, including the XCM instructions for asset transfers.
- [Send XC-20s to Other Chains] (XC-20) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/send-xc20s/xcm-pallet.md): This guide introduces the Polkadot XCM Pallet and explains how to send XC-20s to another chain using some of the pallet's extrinsics.
- [Send XC-20s to Other Chains] (Precompiles, XC-20, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xc20/send-xc20s/xtokens-precompile.md): Learn how to send assets cross-chain via Cross-Consensus Messaging (XCM) using the X-Tokens Precompile with familiar Ethereum libraries like Ethers and Web3.
- [XCM Utilities Precompile Contract] (XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/interoperability/xcm/xcm-utils.md): Learn the various XCM related utility functions available to smart contract developers with Moonbeam's precompiled XCM Utilities contract.
- [How to use Chopsticks to Fork Moonbeam] (Substrate Toolkit, Dev Environments) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/dev-env/chopsticks.md): Learn the basics of how to use Chopsticks to replay blocks, dissect state changes, test XCM interactions, and locally fork the entirety of a Moonbeam network.
- [Substrate Development Environments] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/dev-env/index.md): Explore development environments designed to facilitate access and interaction with the Substrate side of Moonbeam in a local development setting.
- [Substrate API] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/index.md): Learn how to interact with the Substrate API when developing on Moonbeam, including how to use the Polkadot.js API for querying Moonbeam data.
- [Identity Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/account/identity.md): This guide covers the available functions in the Identity Pallet on Moonbeam, which are used to create and manage on-chain identities.
- [Substrate Interfaces for Account Management] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/account/index.md): Explore low-level Substrate interfaces for advanced account management, including proxy control, identity verification, and multisig transactions.
- [Multisig Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/account/multisig.md): Learn about the Multisig Pallet, which taps into Substrate functionality to provide the ability to approve and dispatch calls from a multisig on Moonbeam.
- [Proxy Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/account/proxy.md): Learn how to use the available extrinsics, storage methods, and constants in the Proxy Pallet on Moonbeam to make calls on an account's behalf.
- [Conviction Voting Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/governance/conviction-voting.md): This guide covers the available functions in the Conviction Voting Pallet on Moonbeam, which are used to vote, delegate votes, remove votes, and more.
- [Governance-related Substrate Interfaces] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/governance/index.md): Utilize low-level Substrate interfaces for robust governance capabilities, including submitting proposals and voting on referenda.
- [Parameters Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/governance/parameters.md): Learn how Moonbeam's Parameters Pallet safely and dynamically modifies network config items via on-chain governance, removing the need for runtime upgrades.
- [Preimage Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/governance/preimage.md): Learn about the available extrinsics and storage methods for the Preimage Pallet on Moonbeam, which are used to store and manage on-chain preimages.
- [Referenda Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/governance/referenda.md): This guide covers the available functions for the Referenda Pallet on Moonbeam, of which are used to view and submit data related to on-chain referenda
- [Access Network Features via Substrate] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/index.md): Discover low-level Substrate interfaces that unlock functionality for interacting with critical network features like governance, staking, and randomness.
- [Randomness Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/randomness.md): Learn about the available extrinsics, storage methods, and constants in the Randomness Pallet on Moonbeam to retrieve data on randomness requests and results.
- [Parachain Staking Pallet] (Substrate Toolkit, Staking) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/features/staking.md): Learn about the Parachain Staking Pallet interface on Moonbeam, which can be used to perform delegator and collator activities and retrieve staking information.
- [The Substrate Pallets on Moonbeam] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/index.md): Substrate-based blockchains like Moonbeam utilize modular components to encapsulate specific functionalities. Explore these modules and their interfaces.
- [Low-Level Substrate Interfaces for XCM] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/interoperability/index.md): Leverage low-level Substrate interfaces for seamless interoperability via XCM, include interfaces for asset transfers and remote execution.
- [The Substrate Pallets on Moonbeam] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/utility/index.md): Implement essential utility functions with low-level Substrate interfaces for batching transactions and sending calls via derivative accounts.
- [Utility Pallet] (Substrate Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/interfaces/utility/utility.md): Learn about the available extrinsics for the Utility Pallet on Moonbeam and how to interact with them using Polkadot.js Apps and the Polkadot.js API.
- [Substrate Libraries] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/libraries/index.md): Learn how to use JavaScript or Python Substrate libraries such as Polkadot.js and Py Substrate Interface to interact with the Substrate side of Moonbeam.
- [How to use the Polkadot.js API] (Substrate Toolkit, Libraries and SDKs) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/libraries/polkadot-js-api.md): Learn how to use the Polkadot.js API to interact with a Moonbeam node to get chain data and send transactions (extrinsics) via the Substrate side of Moonbeam.
- [How to use the Python Substrate Interface] (Substrate Toolkit, Libraries and SDKs) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/libraries/py-substrate-interface.md): Learn the basics of how to use the Python Substrate Interface library to query chain data, send transactions, and more on Moonbeam networks.
- [Using Substrate API Sidecar with Moonbeam] (Substrate Toolkit, Libraries and SDKs) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/builders/substrate/libraries/sidecar.md): Learn how to use Sidecar, a Substrate-based REST service, with Moonbeam-based networks to access blocks, account balances, compute gas used, and more.
- [Account Balances] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/core-concepts/balances.md): A description of the main differences that Ethereum developers need to understand in terms of account balances on Moonbeam and how they differ from Ethereum.
- [Consensus & Finality] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/core-concepts/consensus-finality.md): The main differences that Ethereum developers should understand in terms of consensus and finality on Moonbeam and how it differs from Ethereum.
- [Core Concepts] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/core-concepts/index.md): Dive into some of the core concepts and their key differences between Moonbeam, an Ethereum-compatible blockchain, and Ethereum itself.
- [Security Considerations] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/core-concepts/security.md): A description of the main differences that Ethereum developers need to understand in terms of security considerations when developing on Moonbeam.
- [Transfer & Monitor Balances on Moonbeam] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/core-concepts/transfers-api.md): A description of the main differences that developers need to understand in terms of the different balance transfers available on Moonbeam compared to Ethereum.
- [Calculating Transaction Fees] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/core-concepts/tx-fees.md): Learn about the transaction fee model used in Moonbeam and the differences compared to Ethereum that developers should be aware of.
- [Unified Accounts] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/core-concepts/unified-accounts.md): Moonbeam replaced the default Substrate account system with native support for the Ethereum-based H160 accounts and ECDSA keys. Find out more information!
- [List your Dapp on the Moonbeam DApp Directory] (Reference) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/dapp-directory.md): Follow this tutorial to learn how to list your Moonbeam or Moonriver project or update a current listing on the Moonbeam Foundation DApp Directory.
- [Moonbeam's Nimbus Consensus Framework] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/consensus.md): Learn about all the parts of Moonbeam's Nimbus consensus framework and how it works as part of Polkadot's shared security model.
- [Ethereum Compatibility] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/eth-compatibility.md): Transitioning from Ethereum to Moonbeam? Here's a brief overview of the key components and key differences of Moonbeam's Ethereum compatibility.
- [Governance] (Governance, Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/governance.md): As a Polkadot parachain, Moonbeam uses an on-chain governance system, allowing for a stake-weighted vote on public referenda.
- [Features] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/index.md): Learn about some of the main features on Moonbeam, including Ethereum compatibility, interoperability, the consensus framework, staking, governance, and more.
- [Randomness] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/randomness.md): Learn about the sources of VRF randomness on Moonbeam, the request and fulfillment process, and some security considerations when using on-chain randomness.
- [Staking] (Basics, Staking) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/staking.md): Moonbeam provides staking features where token holders delegate collator candidates with their tokens and earn rewards.
- [Treasury] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/treasury.md): Moonbeam has an on-chain Treasury controlled by Treasury Council members, enabling stakeholders to submit proposals to further the network.
- [Cross-Chain Communication] (Basics, XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/features/xchain-plans.md): This guide covers the ways you can build cross-chain dApps with Moonbeam, including via XCM, cross consensus messaging, and GMP, general message passing.
- [Learn About Moonbeam] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/index.md): Learn all about Moonbeam, including the basics about the Ethereum-compatible smart contract platform and its compelling features.
- [Moonbeam Source Code] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/code.md): Moonbeam is an open source project in the Polkadot ecosystem, with publicly available and auditable source code.
- [Glossary] (Reference) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/glossary.md): We've compiled a glossary of terms related to Polkadot that'll make it easier to learn more about the ecosystem.
- [Smart Contract Platform] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/index.md): Learn about the Moonbeam smart contract platform, including the Moonbeam networks, the vision, roadmap, technology, tokens, and more.
- [Important Moonbeam Related Links] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/links.md): If you're new to Moonbeam or the Polkadot network, here are some important links to review, including compatible Ethereum tools.
- [Networks] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/networks/index.md): Learn the basics about each of the Moonbeam networks, including Moonbeam, Moonriver, and the Moonbase Alpha TestNet.
- [Moonbase Alpha TestNet Overview] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/networks/moonbase.md): An overview of the current configuration of the Moonbeam TestNet, Moonbase Alpha, and information on how to start building on it using Solidity.
- [Moonbeam Network Overview] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/networks/moonbeam.md): An overview of the current configuration of the Moonbeam deployment on Polkadot, Moonbeam, and information on how to start building on it using Solidity.
- [Moonriver Overview] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/networks/moonriver.md): An overview of the current configuration of the Moonbeam deployment on Kusama, Moonriver, and information on how to start building on it using Solidity.
- [Overview of Networks] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/networks/overview.md): An overview of all of the MainNet and TestNet deployments of Moonbeam, an Ethereum-compatible smart contract parachain on Polkadot and Kusama.
- [Technology & Architecture] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/technology.md): Moonbeam is built using Rust and Polkadot's Substrate framework, enabling rich tools for implementation while allowing for specialization and optimization.
- [Utility Tokens] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/tokens.md): Each of the Moonbeam networks require a utility token to function. Glimmer (GLMR) for Moonbeam on Polkadot and Moonriver (MOVR) for Moonriver on Kusama.
- [The Moonbeam Vision | Multi-chain] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/vision.md): Moonbeam is designed to enable a multi-chain future, where users and assets can move freely across many specialized and heterogeneous chains.
- [Why Polkadot] (Basics) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/learn/platform/why-polkadot.md): Moonbeam is built on the Substrate framework and connected to the Polkadot network, adding speed and security to the platform.
- [Node Operators & Collators] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/index.md): Learn how to become a node operator on Moonbeam, including running a Moonbeam full node or collator node, indexer nodes, and oracle nodes.
- [Collator Account Management] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/account-management.md): Learn how to manage your collator account, including generating session keys, mapping Nimbus IDs, setting an identity, and creating proxy accounts.
- [Moonbeam Collator Activities] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/activities.md): Instructions on how to dive in and learn about the related activities for becoming and maintaining a collator node in the Moonbeam Network.
- [Author Mapping Precompile] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/author-mapping.md): A guide for collators to learn how to use the Author Mapping Solidity interface to map session keys to a Moonbeam address where block rewards are paid out. 
- [Collators FAQ] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/faq.md): Some FAQs around becoming a collator, collator activities, and things to be aware of when running and operating a collator node on Moonbeam.
- [Collators (Block Producers)] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/index.md): Learn how to become a collator and produce blocks on Moonbeam, including requirements, account management, how to join the collator pool, FAQs, and more.
- [Orbiter Program for Collators] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/orbiter.md): Learn about the Moonbeam Orbiter Program for collators, including the eligibility criteria, bond requirements, rewards, performance metrics, and more.
- [Run a Collator Node] (Basics, Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/overview.md): Instructions on how to dive in and become a collator in the Moonbeam Network once you are running a node.
- [Moonbeam Collator Requirements] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/collators/requirements.md): Learn about the requirements for becoming and maintaining a collator node on Moonbeam networks, including requirements for hardware, bonds, and more.
- [Run a Full, Tracing, or Collator Node] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/index.md): Learn how to spin up a full, tracing, or collator node on Moonbeam, as well as the requirements for being a collator (block producer).
- [Compile the Binary to Run a Node] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/run-a-node/compile-binary.md): Learn how to manually compile the binary to run a full Moonbeam node. Compiling the binary can take around 30 minutes and requires at least 32GB of memory.
- [Use Docker to Run a Node] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/run-a-node/docker.md): How to run a full parachain node so you can have your own RPC endpoint or produce blocks for the Moonbeam Network using Docker.
- [Run a Node Flags & Options] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/run-a-node/flags.md): A list of helpful flags for spinning up a full parachain node on Moonbeam. Also learn how to access all of the flags available for node operators.
- [Run a Full Parachain Node] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/run-a-node/index.md): Learn how to run a full parachain node on any of the Moonbeam networks using Docker or Systemd, so you can have your own RPC endpoint or produce blocks.
- [Run a Node] (Basics, Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/run-a-node/overview.md): Learn about all of the necessary details to run a full parachain node for the Moonbeam Network to have your RPC endpoint or produce blocks.
- [Run a Node on Moonbeam Using Systemd] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/run-a-node/systemd.md): How to run a full parachain node so you can have your own RPC endpoint or produce blocks for the Moonbeam Network using Systemd.
- [Run a Tracing Node] (Node Operators and Collators) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/node-operators/networks/tracing-node.md): Learn how to leverage Geth's Debug and Txpool APIs, and OpenEthereum's Trace module to run a tracing node on Moonbeam.
- [Connect Coinbase Wallet to Moonbeam] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/coinbase-wallet.md): This guide walks you through how to configure the Coinbase Wallet extension and mobile app for Moonbeam and how to create a wallet and send funds on Moonbeam.
- [Connect your Wallet to Moonbeam] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/index.md): Learn about some of the supported wallets available for Moonbeam, and how to connect your wallet and use it to interact with Moonbeam networks.
- [Ethereum App] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/ledger/ethereum.md): This guide walks you through how to use your Ledger hardware wallet to sign transactions in Moonbeam-based networks using the Ethereum app on Ledger Live.
- [Connect & Use Ledger] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/ledger/index.md): Learn how to use your Ledger hardware wallet to sign transactions on Moonbeam networks using the native Moonbeam and Moonriver apps and the Ethereum app.
- [Moonbeam App] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/ledger/moonbeam.md): This guide walks you through how to use your Ledger hardware wallet to sign transactions in Moonbeam using the native Moonbeam Ledger Live app.
- [Using the Moonriver Ledger App] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/ledger/moonriver.md): This guide walks you through how to use your Ledger hardware wallet to sign transactions on Moonriver using the native Moonriver Ledger Live app.
- [Connect MathWallet] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/mathwallet.md): This guide walks you through how to connect Mathwallet, a browser-based wallet that works with Ethereum, to Moonbeam.
- [How to Connect MetaMask] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/metamask.md): This guide walks you through how to connect MetaMask, a browser-based Ethereum wallet, to Moonbeam-based networks and how to transfer funds.
- [Fiat On-Ramps Available for Moonbeam] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/on-ramps.md): This guide introduces on-ramps for Moonbeam, including Transak and Onramp, and provides an overview of the process to acquire GLMR from each.
- [How to use Polkadot.js Apps] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/polkadotjs.md): Follow this quick tutorial to learn how to use Moonbeam’s Ethereum-style H160 addresses and send transactions with Polkadot.js Apps.
- [How to Connect SubWallet to Moonbeam] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/subwallet.md): This guide walks you through how to connect SubWallet, a comprehensive Polkadot, Substrate, and Ethereum wallet, to Moonbeam.
- [Using Talisman with Polkadot JS Apps] (Tokens and Accounts, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/talisman.md): Follow this quick tutorial to learn how to use Moonbeam’s Ethereum-style H160 addresses and send transactions with Polkadot.js Apps and Talisman.
- [How to Connect & Use Trezor] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/connect/trezor.md): Learn how to import your Trezor hardware wallet to MetaMask and how to use your Trezor to sign transactions on Moonbeam.
- [Participate in Governance] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/governance/index.md): Learn how to participate in Moonbeam's on-chain governance, including how to propose an action to be voted on and how to vote on proposals.
- [How to Propose an Action in OpenGov] (Governance) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/governance/proposals.md): Follow these step-by-step instructions to learn how to submit a Democracy proposal for other token holders to vote on in Governance v2 (OpenGov) on Moonbeam.
- [How to Propose a Treasury Spend] (Governance) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/governance/treasury-spend.md): Learn about the full life cycle of a Treasury proposal from the initial proposal on Moonbeam's Community Forum to Council approval of the on-chain spend.
- [How to Vote on a Proposal in OpenGov] (Governance) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/governance/voting.md): Follow this guide to learn how to vote and lock your tokens to support or reject a proposal put forth for a referendum in Governance v2 (OpenGov) on Moonbeam.
- [How to use your GLMR & MOVR Tokens] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/index.md): A series of guides for using and managing your GLMR & MOVR tokens, including supported wallets, participating in governance and staking, and more.
- [Managing an Identity] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/manage/identity.md): Learn how to create and manage an on-chain identity, which includes personal information such as your name and social handles, on Moonbeam-based networks.
- [Manage & Secure your Account] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/manage/index.md): Learn how to manage and secure your account on Moonbeam by creating an on-chain identity, and setting up multisig safes and proxy accounts.
- [Moonbeam Multisig Safe] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/manage/multisig-safe.md): Learn how to use and manage funds with the Moonbeam Safe. Create a new multisig safe and receive and send tokens to the safe, as well as ERC-20s, on Moonbeam.
- [Setting up a Proxy Account] (Tokens and Accounts) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/manage/proxy-accounts.md): Learn how to set up a proxy account on Moonbeam-based networks so you can keep your underlying account safe in cold storage.
- [How to Stake GLMR & MOVR Tokens] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/staking/index.md): Learn how to delegate collator candidates and stake your GLMR and MOVR tokens to earn staking rewards on Moonbeam and Moonriver.
- [How to Stake your MOVR & GLMR Tokens] (Staking) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tokens/staking/stake.md): A guide that shows how you can stake your tokens and earn rewards on Moonbeam by delegating collator candidates.
- [Approve & Swap with the Batch Precompile] (Tutorials, Precompiles) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/batch-approve-swap.md): Learn how to use the Batch Precompile on Moonbeam to batch an approval and swap into a single call, so you can approve the exact amount of tokens for the swap.
- [Gasless Transactions with the Call Permit Precompile] (Tutorials, Precompiles) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/call-permit-gasless-txs.md): Enable gas-less transactions in your DApp with Moonbeam's Call Permit Precompile! Learn how to implement the Call Permit Precompile to improve user experience.
- [Use GPT-4 to Develop Smart Contracts] (Tutorials) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/chat-gpt.md): Learn how you can use OpenAI's ChatGPT (GPT-4) generative AI LLM to write, debug, and deploy Solidity smart contracts on the Moonbeam network.
- [Foundry Development Life Cycle from Start to End] (Tutorials, Dev Environments) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/foundry-start-to-end.md): Follow a step-by-step tutorial on how to use Foundry to build a project on Moonbeam, from writing smart contracts and tests to deploying on TestNet and MainNet.
- [Write & Deploy Smart Contracts] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/get-started.index.md): Check out these tutorials to learn how to write, test, and deploy Solidity smart contracts on Moonbeam using tools like Ethers, Hardhat, Foundry, and more.
- [Hardhat Developer Workflow] (Tutorials, Dev Environments) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/hardhat-start-to-end.md): Learn how to develop, test, and deploy smart contracts with Hardhat and how to take your contracts from a local development node to Moonbeam MainNet.
- [How to Build a DApp] (Tutorials) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/how-to-build-a-dapp.md): Learn about the frontend, smart contracts, and storage system of Decentralized Applications (DApp) by dissecting an entire example project.
- [Ethereum API Tutorials] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/index.md): Follow these step-by-step tutorials to learn how to use Ethereum libraries and development frameworks to create and interact with smart contracts on Moonbeam.
- [Precompiled Contracts Tutorials] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/precompiles.index.md): Check out these tutorials on interacting with precompiled Solidity contracts on Moonbeam to access Substrate features using Ethereum libraries and tools.
- [Create a Lottery with the Randomness Precompile] (Tutorials, Precompiles) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/randomness-lottery.md): Looking to create a lottery smart contract? Follow this step-by-step tutorial on using Moonbeam's Randomness Precompile (a Solidity interface) to get started.
- [Build an NFT Marketplace DApp with thirdweb] (Tutorials) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/thirdweb.md): Learn how to build an NFT marketplace DApp with thirdweb, including both frontend and smart contract components, in an end-to-end fashion.
- [Using Tenderly to Debug and Simulate Transactions] (Tutorials) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/eth-api/using-tenderly.md): Follow a step-by-step guide on getting started with Tenderly, including using the debugger, forking and simulating transactions, and monitoring smart contracts.
- [Tutorials] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/index.md): Dive into the Moonbeam smart contract platform through this compiled list of step-by-step tutorials on a variety of subjects.
- [Gasless Transactions with 0xGasless] (Tutorials) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/integrations/0xgasless.md): Learn how to implement gasless transactions on Moonbeam using 0xGasless, enabling users to interact with smart contracts without holding native tokens.
- [Integration Tutorials] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/integrations/index.md): Get ahead with third-party integrations on Moonbeam! Our tutorials cover everything you need to know to integrate seamlessly. Explore now and start building!
- [Tutorials on Indexing Blockchain Data] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/integrations/indexers.index.md): Indexers are used to query and process blockchain data efficiently. Follow these tutorials to learn how to use indexers to query blockchain data on Moonbeam.
- [Index a Local Development Node] (Tutorials, Indexer Nodes and Queries) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/integrations/local-subsquid.md): Improve your DApp development experience by following this guide to learn how to index a DApp deployed locally on a Moonbeam dev node with SQD (Subsquid)!
- [Index NFT Transfers with SQD (Subsquid)] (Tutorials, Indexer Nodes and Queries) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/integrations/nft-subsquid.md): Learn how to use SQD (formerly Subsquid), a query node framework for Substrate-based chains, to index and process NFT transfer data for Moonbeam and Moonriver.
- [Tutorials on Using Oracles] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/integrations/oracles.index.md): Dive into the tutorials featured in this section to gain insights into seamlessly integrating Oracles into your smart contracts or dApps on Moonbeam
- [Supra Oracles] (Tutorials) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/integrations/supra.md): In this step-by-step tutorial, learn about Supra's pull model and how to use their price feeds to fetch price data in smart contracts on Moonbeam.
- [Build a Cross-Chain DAO with OpenZeppelin's Governor] (Tutorials) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/cross-chain-dao.md): In this step-by-step tutorial, you'll learn about connected contracts and how to create a cross-chain DAO using OpenZeppelin's Governor contract on Moonbeam.
- [Interoperability Tutorials] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/index.md): Looking to learn about interoperability on Moonbeam? Our tutorials have got you covered! Explore our step-by-step guides today and start building with ease.
- [Create Connected Contracts] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/protocols.index.md): Check out these tutorials to learn how to create connected contracts and cross-chain applications with interoperability protocols like LayerZero on Moonbeam.
- [Remote Batch EVM Calls via XCM] (Tutorials, Ethereum Toolkit) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/remote-batched-evm-calls.md): In this guide, we'll use remote EVM execution via XCM coupled with the Batch Precompile to execute multiple contract calls in Moonbeam's EVM remotely via XCM.
- [Remote Staking on Moonbeam from Polkadot via XCM] (Tutorials, XCM, Staking) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/remote-staking-xcm.md): In this guide, we'll be leveraging remote execution to remotely stake GLMR on Moonbeam using a series of XCM instructions.
- [Uniswap V2 Swap on Moonbeam from Polkadot via XCM] (Tutorials, XCM) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/uniswapv2-swap-xcm.md): In this guide, we'll use remote EVM execution via XCM to perform a Uniswap V2 swap to showcase how Moonbeam can be leveraged in a connected contracts approach.
- [Mint a Cross-Chain NFT with Axelar] (Tutorials, GMP Providers) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/using-axelar-sdk.md): In this step-by-step tutorial, you'll learn how to use the Axelar SDK to send a message from Moonbeam to another connected chain to remotely mint an NFT.
- [XCM (Cross-Consensus Messaging) Tutorials] (No categories available.) (https://raw.githubusercontent.com/moonbeam-foundation/moonbeam-docs/refs/heads/master/tutorials/interoperability/xcm.index.md): Check out these tutorials to learn how to use XCM on Moonbeam to create cross-chain applications within the Polkadot and Kusama ecosystems.